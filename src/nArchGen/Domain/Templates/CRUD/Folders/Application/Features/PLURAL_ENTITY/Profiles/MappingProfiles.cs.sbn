using Application.Features.{{ entity.name | string.pascalcase | string.plural }}.Commands.Create;
using Application.Features.{{ entity.name | string.pascalcase | string.plural }}.Commands.Delete;
using Application.Features.{{ entity.name | string.pascalcase | string.plural }}.Commands.Update;
using Application.Features.{{ entity.name | string.pascalcase | string.plural }}.Queries.GetById;
using Application.Features.{{ entity.name | string.pascalcase | string.plural }}.Queries.GetList;
using AutoMapper;
using NArchitecture.Core.Application.Responses;
using Domain.Entities;
using NArchitecture.Core.Persistence.Paging;

namespace Application.Features.{{ entity.name | string.pascalcase | string.plural }}.Profiles;

public class MappingProfiles : Profile
{
    public MappingProfiles()
    {
        CreateMap<Create{{ entity.name | string.pascalcase }}Command, {{ entity.name | string.pascalcase }}>();
        CreateMap<{{ entity.name | string.pascalcase }}, Created{{ entity.name | string.pascalcase }}Response>();

        CreateMap<Update{{ entity.name | string.pascalcase }}Command, {{ entity.name | string.pascalcase }}>();
        CreateMap<{{ entity.name | string.pascalcase }}, Updated{{ entity.name | string.pascalcase }}Response>();

        CreateMap<Delete{{ entity.name | string.pascalcase }}Command, {{ entity.name | string.pascalcase }}>();
        CreateMap<{{ entity.name | string.pascalcase }}, Deleted{{ entity.name | string.pascalcase }}Response>();

        CreateMap<{{ entity.name | string.pascalcase }}, GetById{{ entity.name | string.pascalcase }}Response>();

        CreateMap<{{ entity.name | string.pascalcase }}, GetList{{ entity.name | string.pascalcase }}ListItemDto>();
        CreateMap<IPaginate<{{ entity.name | string.pascalcase }}>, GetListResponse<GetList{{ entity.name | string.pascalcase }}ListItemDto>>().ConvertUsing(new PaginateToGetListResponseConverter<{{ entity.name | string.pascalcase }}, GetList{{ entity.name | string.pascalcase }}ListItemDto>());
    }
}
public class PaginateToGetListResponseConverter<TSource, TDestination>
    : ITypeConverter<IPaginate<TSource>, GetListResponse<TDestination>>
{
    public GetListResponse<TDestination> Convert(
        IPaginate<TSource> source,
        GetListResponse<TDestination> destination,
        ResolutionContext context)
    {
        return new GetListResponse<TDestination>
        {
            Items = context.Mapper.Map<List<TDestination>>(source.Items ?? new List<TSource>()),
            Index = source.Index,
            Size = source.Size,
            Count = source.Count,
            Pages = source.Pages
        };
    }
}