{{ if is_secured_operation_used }}using Application.Features.{{ entity.name | string.pascalcase | string.plural }}.Constants;
{{ end }}using Application.Services.{{ entity.name | string.pascalcase | string.plural }};
using AutoMapper;
using Domain.Entities;{{ if is_secured_operation_used }}
using NArchitectureTemplate.Core.Application.Pipelines.Authorization;{{ end }}{{ if is_caching_used }}
using NArchitectureTemplate.Core.Application.Pipelines.Caching;{{ end }}
using NArchitectureTemplate.Core.Application.Requests;
using NArchitectureTemplate.Core.Application.Responses;
using NArchitectureTemplate.Core.Persistence.Paging;
using MediatR;{{ if is_secured_operation_used }}
using static Application.Features.{{ entity.name | string.pascalcase | string.plural }}.Constants.{{ entity.name | string.pascalcase | string.plural }}OperationClaims;{{ end }}

namespace Application.Features.{{ entity.name | string.pascalcase | string.plural }}.Queries.GetList;

public class GetList{{ entity.name | string.pascalcase }}Query : IRequest<GetListResponse<GetList{{ entity.name | string.pascalcase }}ListItemDto>>{{ if is_secured_operation_used }}, ISecuredRequest{{ end }}{{ if is_caching_used }}, ICachableRequest{{ end }}
{
    public PageRequest PageRequest { get; set; }{{ if is_secured_operation_used }}

    public string[] Roles => [Admin, Read];{{ end }}{{ if is_caching_used }}

    public bool BypassCache { get; }
    public string? CacheKey => $"GetList{{ entity.name | string.pascalcase | string.plural }}({PageRequest.PageIndex},{PageRequest.PageSize})";
    public string? CacheGroupKey => "Get{{ entity.name | string.pascalcase | string.plural }}";
    public TimeSpan? SlidingExpiration { get; }{{ end }}

    public class GetList{{ entity.name | string.pascalcase }}QueryHandler : IRequestHandler<GetList{{ entity.name | string.pascalcase }}Query, GetListResponse<GetList{{ entity.name | string.pascalcase }}ListItemDto>>
    {
        private readonly I{{ entity.name | string.pascalcase }}Service _{{ entity.name | string.camelcase }}Service;
        private readonly IMapper _mapper;

        public GetList{{ entity.name | string.pascalcase }}QueryHandler(I{{ entity.name | string.pascalcase }}Service {{ entity.name | string.camelcase }}Service, IMapper mapper)
        {
            _{{ entity.name | string.camelcase }}Service = {{ entity.name | string.camelcase }}Service;
            _mapper = mapper;
        }

        public async Task<GetListResponse<GetList{{ entity.name | string.pascalcase }}ListItemDto>> Handle(GetList{{ entity.name | string.pascalcase }}Query request, CancellationToken cancellationToken)
        {
            IPaginate<{{ entity.name | string.pascalcase }}> {{ entity.name | string.camelcase | string.plural }} = await _{{ entity.name | string.camelcase }}Service.GetListAsync(
                index: request.PageRequest.PageIndex,
                size: request.PageRequest.PageSize, 
                cancellationToken: cancellationToken
            );

                        GetListResponse<GetList{{ entity.name | string.pascalcase }}ListItemDto> response;
            if ({{ entity.name | string.camelcase | string.plural }}.Items == null || !{{ entity.name | string.camelcase | string.plural }}.Items.Any())
            {
                response = new GetListResponse<GetList{{ entity.name | string.pascalcase }}ListItemDto>
                {
                    Items = new List<GetList{{ entity.name | string.pascalcase }}ListItemDto>(),
                    Index = {{ entity.name | string.camelcase | string.plural }}.Index,
                    Size = {{ entity.name | string.camelcase | string.plural }}.Size,
                    Count = {{ entity.name | string.camelcase | string.plural }}.Count,
                    Pages = {{ entity.name | string.camelcase | string.plural }}.Pages
                };
            }
            else
            {
                response = _mapper.Map<GetListResponse<GetList{{ entity.name | string.pascalcase }}ListItemDto>>({{ entity.name | string.camelcase | string.plural }});
            }

            return response;
        }
    }
}